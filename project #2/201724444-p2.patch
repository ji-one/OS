diff -urN ./xv6-pnu-p2/defs.h ./xv6-pnu-p2-201724444/defs.h
--- ./xv6-pnu-p2/defs.h	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-p2-201724444/defs.h	2020-04-27 01:46:56.000000000 +0900
@@ -120,6 +120,10 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int		setnice(int pid, int nice);
+int		getnice(int pid);
+void		ps(int pid);
+
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff -urN ./xv6-pnu-p2/Makefile ./xv6-pnu-p2-201724444/Makefile
--- ./xv6-pnu-p2/Makefile	2019-04-04 13:20:47.000000000 +0900
+++ ./xv6-pnu-p2-201724444/Makefile	2020-04-27 02:33:09.000000000 +0900
@@ -181,6 +181,12 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_minitop\
+	_test1\
+	_test2\
+	_test3\
+	_test4\
+	_test5\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff -urN ./xv6-pnu-p2/minitop.c ./xv6-pnu-p2-201724444/minitop.c
--- ./xv6-pnu-p2/minitop.c	1970-01-01 09:00:00.000000000 +0900
+++ ./xv6-pnu-p2-201724444/minitop.c	2020-04-27 12:35:35.000000000 +0900
@@ -0,0 +1,10 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int 
+main(int arg, char **argv)
+{
+  ps(atoi(argv[1]));
+  exit();
+}
diff -urN ./xv6-pnu-p2/proc.c ./xv6-pnu-p2-201724444/proc.c
--- ./xv6-pnu-p2/proc.c	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-p2-201724444/proc.c	2020-04-28 23:24:42.788334014 +0900
@@ -88,6 +88,8 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+ // p->parent = p; //changed
+  p->nice = 20; // default nice value is 20
 
   release(&ptable.lock);
 
@@ -178,7 +180,7 @@
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
 int
-fork(void)
+fork(void)//***to be changed***
 {
   int i, pid;
   struct proc *np;
@@ -199,6 +201,7 @@
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  np->nice = curproc->nice; //changed
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -213,11 +216,9 @@
   pid = np->pid;
 
   acquire(&ptable.lock);
-
   np->state = RUNNABLE;
-
   release(&ptable.lock);
-
+ 
   return pid;
 }
 
@@ -322,19 +323,29 @@
 void
 scheduler(void)
 {
-  struct proc *p;
+  struct proc *p,*p1;
   struct cpu *c = mycpu();
   c->proc = 0;
   
   for(;;){
     // Enable interrupts on this processor.
     sti();
+    struct proc *highest_priority ; //highest priority
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
+      highest_priority = p;
+    
+	for(p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++){
+	  if(p1->state != RUNNABLE)
+           continue;
+      	  if(highest_priority->nice > p1->nice)
+           highest_priority = p1;
+        }
+      p = highest_priority;
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -349,12 +360,12 @@
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
-    }
-    release(&ptable.lock);
+   } 
+    
+     release(&ptable.lock);
 
   }
 }
-
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +543,97 @@
     cprintf("\n");
   }
 }
+
+int
+getnice(int pid) //return the nice value of pid(process)
+{
+
+  if(pid <= 0) return -1;
+ 
+  struct proc *p;
+  
+  acquire(&ptable.lock);
+  
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid){
+       release(&ptable.lock);
+       return p->nice;
+    }
+  }
+
+  release(&ptable.lock);
+  return -1;
+}
+
+void
+ps(int pid) //prints out process(s)'s information
+{
+  sti();
+  struct proc *p;
+  acquire(&ptable.lock); 
+  
+  if(pid == 0){
+    cprintf("pid\tppid\tprio\tstate\tname\n");
+    char *state = "";
+    int ppid;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if(p->state == EMBRYO) state = "embryo";
+	else if(p->state == SLEEPING) state = "sleep";
+	else if(p->state == RUNNABLE) state = "runble";
+	else if(p->state == RUNNING) state = "run";
+	else if(p->state == ZOMBIE) state = "zombie";
+	else continue;
+
+	if(p->parent->pid < 0) ppid = p->pid;
+	else ppid = p->parent->pid;
+        cprintf("%d\t%d\t%d\t%s\t%s\n",p->pid,ppid,p->nice,state,p->name);
+     }
+  }
+  else{
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+	if(p->pid == pid){
+	   cprintf("pid\tppid\tprio\tstate\tname\n");
+	   char *state = "";
+	   int ppid;
+	   if(p->state == EMBRYO) state = "embryo";
+	   else if(p->state == SLEEPING) state = "sleep";
+	   else if(p->state == RUNNABLE) state = "runble";
+           else if(p->state == RUNNING) state = "run";
+	   else if(p->state == ZOMBIE) state = "zombie";
+	   else if(p->state == UNUSED) state = "unused";
+	   else continue;
+
+	   if(p->parent->pid < 0) ppid = p->pid;
+	   else ppid = p->parent->pid;
+	   cprintf("%d\t%d\t%d\t%s\t%s\n",p->pid,ppid,p->nice,state,p->name);
+	   break;	
+	}
+     }
+  }
+
+  release(&ptable.lock);
+
+}
+
+int
+setnice(int pid,int nice_value) //get the nice value(0~40) of process
+{
+  if(nice_value<0 || nice_value>40 || pid<=0) return -1;
+ 
+  struct  proc *p;
+
+  acquire(&ptable.lock);
+  
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+       if(p->pid == pid){
+	p->nice = nice_value;
+//	myproc()->state = RUNNABLE;
+//	sched();
+	release(&ptable.lock);
+	yield();
+	return 0;
+      }
+  }
+  release(&ptable.lock);
+  return -1;
+} 
diff -urN ./xv6-pnu-p2/proc.h ./xv6-pnu-p2-201724444/proc.h
--- ./xv6-pnu-p2/proc.h	2019-04-04 11:16:13.000000000 +0900
+++ ./xv6-pnu-p2-201724444/proc.h	2020-04-27 01:38:05.000000000 +0900
@@ -49,6 +49,7 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int nice;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -urN ./xv6-pnu-p2/syscall.c ./xv6-pnu-p2-201724444/syscall.c
--- ./xv6-pnu-p2/syscall.c	2019-04-04 11:17:39.000000000 +0900
+++ ./xv6-pnu-p2-201724444/syscall.c	2020-04-27 01:37:30.000000000 +0900
@@ -104,6 +104,9 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_yield(void);
+extern int sys_setnice(void);
+extern int sys_getnice(void);
+extern int sys_ps(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +131,9 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_yield]   sys_yield,
+[SYS_setnice] sys_setnice,
+[SYS_getnice] sys_getnice,
+[SYS_ps]      sys_ps,
 };
 
 void
diff -urN ./xv6-pnu-p2/syscall.h ./xv6-pnu-p2-201724444/syscall.h
--- ./xv6-pnu-p2/syscall.h	2019-04-04 11:18:03.000000000 +0900
+++ ./xv6-pnu-p2-201724444/syscall.h	2020-04-27 01:53:01.000000000 +0900
@@ -21,3 +21,6 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_yield  22
+#define SYS_setnice 23
+#define SYS_getnice 24
+#define SYS_ps 25
diff -urN ./xv6-pnu-p2/sysproc.c ./xv6-pnu-p2-201724444/sysproc.c
--- ./xv6-pnu-p2/sysproc.c	2019-04-04 11:19:03.000000000 +0900
+++ ./xv6-pnu-p2-201724444/sysproc.c	2020-04-28 11:30:35.000000000 +0900
@@ -8,6 +8,44 @@
 #include "proc.h"
 
 int
+sys_setnice(void)
+{
+  int pid, nice;
+
+  if(argint(0,&pid) <0)
+    return -1;
+
+  if(argint(1,&nice) <0)
+    return -1;
+
+  return setnice(pid,nice);
+}
+
+int
+sys_getnice(void)
+{
+  int pid;
+
+  if(argint(0,&pid) <0)
+    return -1;
+
+  return getnice(pid);
+}
+
+int
+sys_ps(void)
+{
+  int pid;
+
+  if(argint(0,&pid) <0)
+    return -1;
+
+  ps(pid);
+  return 0;
+}
+
+
+int
 sys_fork(void)
 {
   return fork();
diff -urN ./xv6-pnu-p2/user.h ./xv6-pnu-p2-201724444/user.h
--- ./xv6-pnu-p2/user.h	2019-04-04 11:19:50.000000000 +0900
+++ ./xv6-pnu-p2-201724444/user.h	2020-04-27 01:24:59.000000000 +0900
@@ -24,6 +24,10 @@
 int sleep(int);
 int uptime(void);
 void yield(void);
+int setnice(int,int);
+int getnice(int);
+void ps(int);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -urN ./xv6-pnu-p2/usys.S ./xv6-pnu-p2-201724444/usys.S
--- ./xv6-pnu-p2/usys.S	2019-04-04 11:25:04.000000000 +0900
+++ ./xv6-pnu-p2-201724444/usys.S	2020-04-27 01:56:54.000000000 +0900
@@ -30,3 +30,6 @@
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(yield)
+SYSCALL(setnice)
+SYSCALL(getnice)
+SYSCALL(ps)
